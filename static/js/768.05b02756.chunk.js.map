{"version":3,"file":"static/js/768.05b02756.chunk.js","mappings":"uTAuCA,EAnCiB,SAAC,GAAc,IAAZA,EAAW,EAAXA,KACZC,GAAWC,EAAAA,EAAAA,MAMjB,OAAKF,GAIH,wBACGA,EAAKG,KAAI,SAAAC,GACR,OACE,2BACE,2BACGA,EAAKC,QAAS,gBAAKC,IAAKF,EAAKC,MAAOE,IAAI,KAD3C,YAIA,4BACE,wBAAKH,EAAKI,QACV,mCAAWJ,EAAKK,MAAhB,QACA,sCAAcL,EAAKM,aAEnB,mBAAQC,KAAK,SAASC,QAAS,kBArBd,SAAAR,GAC3BH,GAASY,EAAAA,EAAAA,IAAeT,GACzB,CAmBgDU,CAAqBV,EAA3B,EAA/B,yBAVKA,EAAKW,IAgBjB,MAtBI,IAyBV,EC3BKC,EAAa,CACjBR,KAAM,GACNS,MAAO,GACPC,MAAO,GACPC,QAAS,IAiGX,EA9FiB,WACf,IAAMlB,GAAWC,EAAAA,EAAAA,MACXF,GAAOoB,EAAAA,EAAAA,IAAYC,EAAAA,GAEzB,GAA4BC,EAAAA,EAAAA,UAASN,GAArC,eAAOO,EAAP,KAAeC,EAAf,KACMC,EAAe,SAAAC,GACnB,MAAwBA,EAAMC,OAAtBnB,EAAR,EAAQA,KAAMoB,EAAd,EAAcA,MACdJ,GAAU,SAAAK,GAAU,yBACfA,GADe,cAEjBrB,EAAOoB,GAFU,GAIrB,EAED,IAAK5B,EACH,OAAO,KAET,IAAM8B,EAAW,mCAAG,WAAMJ,GAAN,8EACZK,EAAW,CACfC,OAAQT,EACRU,WAAYjC,GAGd0B,EAAMQ,iBANY,SAOZjC,GAASkC,EAAAA,EAAAA,GAASJ,IAPN,OAQlB9B,GAASmC,EAAAA,EAAAA,OACTZ,EAAUR,GATQ,2CAAH,sDAYXqB,EAAarC,EAAKsC,QAAO,SAACC,EAAKnC,GAAN,OAAemC,EAAMnC,EAAKK,KAA1B,GAAiC,GAEhE,OACE,4BACE,SAAC,KAAD,CAAS+B,GAAG,IAAZ,UACE,wCAEF,6BACE,8BACE,oCACA,kBACE7B,KAAK,OACLH,KAAK,OACLiC,YAAY,iBACZb,MAAOL,EAAOf,KACdkC,SAAU,SAAAhB,GACRD,EAAaC,EACd,QAGL,8BACE,qCACA,kBACEf,KAAK,OACLH,KAAK,QACLiC,YAAY,kBACZb,MAAOL,EAAON,MACdyB,SAAU,SAAAhB,GACRD,EAAaC,EACd,QAGL,8BACE,qCACA,kBACEf,KAAK,OACLH,KAAK,QACLiC,YAAY,kBACZb,MAAOL,EAAOL,MACdwB,SAAU,SAAAhB,GACRD,EAAaC,EACd,QAGL,8BACE,uCACA,kBACEf,KAAK,OACLH,KAAK,UACLiC,YAAY,oBACZb,MAAOL,EAAOJ,QACduB,SAAU,SAAAhB,GACRD,EAAaC,EACd,QAGL,SAAC,EAAD,CAAU1B,KAAMA,KAChB,0CAAkBqC,EAAlB,QACA,mBAAQ1B,KAAK,SAASC,QAAS,SAAAc,GAAK,OAAII,EAAYJ,EAAhB,EAApC,yBAMP,C,uDC5GM,IAAML,EAAU,SAAAsB,GAAK,OAAIA,EAAM3C,KAAK4C,KAAf,C","sources":["components/CartList/CartList.jsx","page/CartPage/CartPage.jsx","redux/cart/cartSelectors.js"],"sourcesContent":["import { useDispatch } from 'react-redux';\n\nimport { deleteFromCart } from '../../redux/cart/cartSlice';\n\nconst CartList = ({ cart }) => {\n  const dispatch = useDispatch();\n\n  const handleDeleteFromCart = item => {\n    dispatch(deleteFromCart(item));\n  };\n\n  if (!cart) {\n    return null;\n  }\n  return (\n    <ul>\n      {cart.map(item => {\n        return (\n          <li key={item._id}>\n            <div>\n              {item.photo && <img src={item.photo} alt=\"\" />}\n              photo\n            </div>\n            <div>\n              <h3>{item.name}</h3>\n              <p>Price: {item.price}$</p>\n              <p>Quantity: {item.quantity}</p>\n\n              <button type=\"button\" onClick={() => handleDeleteFromCart(item)}>\n                DELETE\n              </button>\n            </div>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default CartList;\n","import { NavLink } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { useState } from 'react';\n\nimport { addOrder } from 'redux/order/orderOperations';\nimport { getCart } from '../../redux/cart/cartSelectors';\nimport { deleteAllCart } from 'redux/cart/cartSlice';\n\nimport CartList from 'components/CartList/CartList';\n\nconst initValues = {\n  name: '',\n  phone: '',\n  email: '',\n  address: '',\n};\n\nconst CartPage = () => {\n  const dispatch = useDispatch();\n  const cart = useSelector(getCart);\n\n  const [values, setValues] = useState(initValues);\n  const handleChange = event => {\n    const { name, value } = event.target;\n    setValues(prevValues => ({\n      ...prevValues,\n      [name]: value,\n    }));\n  };\n\n  if (!cart) {\n    return null;\n  }\n  const createOrder = async event => {\n    const newOrder = {\n      client: values,\n      orderItems: cart,\n    };\n\n    event.preventDefault();\n    await dispatch(addOrder(newOrder));\n    dispatch(deleteAllCart());\n    setValues(initValues);\n  };\n\n  const totalPrice = cart.reduce((acc, item) => acc + item.price, 0);\n\n  return (\n    <div>\n      <NavLink to=\"/\">\n        <button>Back</button>\n      </NavLink>\n      <form>\n        <label>\n          <span>Name</span>\n          <input\n            type=\"text\"\n            name=\"name\"\n            placeholder=\"Edit your name\"\n            value={values.name}\n            onChange={event => {\n              handleChange(event);\n            }}\n          />\n        </label>\n        <label>\n          <span>phone</span>\n          <input\n            type=\"text\"\n            name=\"phone\"\n            placeholder=\"Edit your phone\"\n            value={values.phone}\n            onChange={event => {\n              handleChange(event);\n            }}\n          />\n        </label>\n        <label>\n          <span>email</span>\n          <input\n            type=\"text\"\n            name=\"email\"\n            placeholder=\"Edit your email\"\n            value={values.email}\n            onChange={event => {\n              handleChange(event);\n            }}\n          />\n        </label>\n        <label>\n          <span>address</span>\n          <input\n            type=\"text\"\n            name=\"address\"\n            placeholder=\"Edit your address\"\n            value={values.address}\n            onChange={event => {\n              handleChange(event);\n            }}\n          />\n        </label>\n        <CartList cart={cart} />\n        <h3>Total price: {totalPrice}$</h3>\n        <button type=\"submit\" onClick={event => createOrder(event)}>\n          Submit\n        </button>\n      </form>\n    </div>\n  );\n};\n\nexport default CartPage;\n","//selectors\nexport const getCart = state => state.cart.items;\n"],"names":["cart","dispatch","useDispatch","map","item","photo","src","alt","name","price","quantity","type","onClick","deleteFromCart","handleDeleteFromCart","_id","initValues","phone","email","address","useSelector","getCart","useState","values","setValues","handleChange","event","target","value","prevValues","createOrder","newOrder","client","orderItems","preventDefault","addOrder","deleteAllCart","totalPrice","reduce","acc","to","placeholder","onChange","state","items"],"sourceRoot":""}