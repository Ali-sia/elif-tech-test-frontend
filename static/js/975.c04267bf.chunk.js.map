{"version":3,"file":"static/js/975.c04267bf.chunk.js","mappings":"sNAEaA,EAAe,SAAAC,GAAK,OAAIA,EAAMC,MAAMC,KAAhB,EAEpBC,EAAkB,SAAAH,GAAK,OAAIA,EAAMC,MAAMG,SAAhB,E,mBCmDpC,EAlDiB,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,WACZC,GAAWC,EAAAA,EAAAA,MACXN,GAAQO,EAAAA,EAAAA,IAAYT,GACpBK,GAAYI,EAAAA,EAAAA,IAAYL,GAC9B,GAAwCM,EAAAA,EAAAA,UAAS,MAAjD,eAAOC,EAAP,KAAqBC,EAArB,MAEAC,EAAAA,EAAAA,YAAU,WACRN,GAASO,EAAAA,EAAAA,KACV,GAAE,CAACP,KAEJM,EAAAA,EAAAA,YAAU,WACJX,GAASA,EAAMa,OAAS,IAC1BH,EAAgBV,EAAM,GAAGc,KACzBV,EAAWJ,EAAM,GAAGc,KAEvB,GAAE,CAACd,EAAOI,IAEX,IAAMW,EAAsB,SAAAC,GAC1B,IAAMC,EAAiBD,EAAME,OAAOC,MACpCT,EAAgBO,GAChBb,EAAWa,EACZ,EAED,OAAKjB,GAKH,0BACGG,IAAa,uCACbH,EAAMoB,KAAI,SAAAC,GACT,OACE,yBACE,8BACE,kBACEC,KAAK,QACLC,KAAK,OACLJ,MAAOE,EAAKP,IACZU,SAAUT,EACVU,QAAShB,IAAiBY,EAAKP,MAEhCO,EAAKE,SATDF,EAAKP,IAajB,OArBI,IAwBV,E,UCpDYY,EAAc,SAAA3B,GAAK,OAAIA,EAAM4B,MAAM1B,KAAhB,E,8BCmEhC,EAzDiB,SAAC,GAAgB,IAAd2B,EAAa,EAAbA,OACZvB,GAAWC,EAAAA,EAAAA,MACXuB,GAAOtB,EAAAA,EAAAA,IAAYuB,EAAAA,GACzB,GAAsCtB,EAAAA,EAAAA,WAAS,GAA/C,eAAOuB,EAAP,KAAoBC,EAApB,MAEArB,EAAAA,EAAAA,YAAU,WACRN,GAAS4B,EAAAA,EAAAA,GAAcL,GACxB,GAAE,CAACvB,EAAUuB,KAadjB,EAAAA,EAAAA,YAAU,WACJoB,IACFG,EAAAA,GAAAA,MAAY,oCACZF,GAAe,GAElB,GAAE,CAACD,IAEJ,IAAMI,GAAO5B,EAAAA,EAAAA,IAAYmB,GACzB,OAAKS,GAKH,+BACE,wBACGA,EAAKf,KAAI,SAACgB,EAAMC,GACf,OACE,2BACE,2BACGD,EAAKE,QAAS,gBAAKC,IAAKH,EAAKE,MAAOE,IAAI,KAD3C,YAIA,4BACE,wBAAKJ,EAAKb,QACV,mCAAWa,EAAKK,MAAhB,QACA,mBAAQnB,KAAK,SAASoB,QAAS,kBApCrB,SAAAN,GAGtB,GAFsBP,EAAKc,MAAK,SAAAC,GAAI,OAAIA,EAAKC,QAAUT,EAAKS,KAAxB,IAIlC,OADAb,GAAe,GACR,KAGT3B,GAASyC,EAAAA,EAAAA,IAAUV,GACpB,CA2BkDW,CAAgBX,EAAtB,EAA/B,sBARJ,UAAYA,EAAKtB,IAAjB,YAAwBuB,GAc3B,QAtBE,IA0BV,EClDD,EAXiB,WACf,OAA8B7B,EAAAA,EAAAA,UAAS,IAAvC,eAAOwC,EAAP,KAAgB5C,EAAhB,KAEA,OACE,4BACE,SAAC,EAAD,CAAUA,WAAYA,KACtB,SAAC,EAAD,CAAUwB,OAAQoB,MAGvB,C,uDCbM,IAAMlB,EAAU,SAAA/B,GAAK,OAAIA,EAAM8B,KAAK5B,KAAf,C","sources":["redux/shop/shopSelectors.js","components/ShopList/ShopList.jsx","redux/menu/menuSelectors.js","components/ShopMenu/ShopMenu.jsx","page/ShopPage/ShopPage.jsx","redux/cart/cartSelectors.js"],"sourcesContent":["//selectors\n\nexport const getShopsList = state => state.shops.items;\n\nexport const getShopsLoading = state => state.shops.isLoading;\n","import { useDispatch, useSelector } from 'react-redux';\nimport { getShopsList, getShopsLoading } from '../../redux/shop/shopSelectors';\nimport { fetchShops } from 'redux/shop/shopOperations';\nimport { useEffect, useState } from 'react';\n\nconst ShopList = ({ setVariant }) => {\n  const dispatch = useDispatch();\n  const shops = useSelector(getShopsList);\n  const isLoading = useSelector(getShopsLoading);\n  const [selectedShop, setSelectedShop] = useState(null);\n\n  useEffect(() => {\n    dispatch(fetchShops());\n  }, [dispatch]);\n\n  useEffect(() => {\n    if (shops && shops.length > 0) {\n      setSelectedShop(shops[0]._id);\n      setVariant(shops[0]._id);\n    }\n  }, [shops, setVariant]);\n\n  const handleVariantChange = event => {\n    const selectedShopId = event.target.value;\n    setSelectedShop(selectedShopId);\n    setVariant(selectedShopId);\n  };\n\n  if (!shops) {\n    return null;\n  }\n\n  return (\n    <ul>\n      {isLoading && <h2>loading...</h2>}\n      {shops.map(shop => {\n        return (\n          <li key={shop._id}>\n            <label>\n              <input\n                type=\"radio\"\n                name=\"shop\"\n                value={shop._id}\n                onChange={handleVariantChange}\n                checked={selectedShop === shop._id}\n              />\n              {shop.name}\n            </label>\n          </li>\n        );\n      })}\n    </ul>\n  );\n};\n\nexport default ShopList;\n","//selectors\nexport const getShopMenu = state => state.menus.items;\n","import { useEffect, useState } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport toast from 'react-hot-toast';\n\nimport { getShopMenu } from '../../redux/menu/menuSelectors';\nimport { fetchShopMenu } from 'redux/menu/menuOperations';\n\nimport { addToCart } from '../../redux/cart/cartSlice';\nimport { getCart } from '../../redux/cart/cartSelectors';\n\nconst ShopMenu = ({ shopId }) => {\n  const dispatch = useDispatch();\n  const cart = useSelector(getCart);\n  const [showToaster, setShowToaster] = useState(false);\n\n  useEffect(() => {\n    dispatch(fetchShopMenu(shopId));\n  }, [dispatch, shopId]);\n\n  const handleAddToCart = item => {\n    const isAnotherShop = cart.find(test => test.owner !== item.owner);\n\n    if (isAnotherShop) {\n      setShowToaster(true);\n      return null;\n    }\n\n    dispatch(addToCart(item));\n  };\n\n  useEffect(() => {\n    if (showToaster) {\n      toast.error('You can order from only one shop');\n      setShowToaster(false);\n    }\n  }, [showToaster]);\n\n  const menu = useSelector(getShopMenu);\n  if (!menu) {\n    return null;\n  }\n\n  return (\n    <>\n      <ul>\n        {menu.map((item, index) => {\n          return (\n            <li key={`${item._id}-${index}`}>\n              <div>\n                {item.photo && <img src={item.photo} alt=\"\" />}\n                photo\n              </div>\n              <div>\n                <h3>{item.name}</h3>\n                <p>Price: {item.price}$</p>\n                <button type=\"button\" onClick={() => handleAddToCart(item)}>\n                  BUY\n                </button>\n              </div>\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default ShopMenu;\n","import { useState } from 'react';\n\nimport ShopList from 'components/ShopList/ShopList';\nimport ShopMenu from 'components/ShopMenu/ShopMenu';\n\nconst ShopPage = () => {\n  const [variant, setVariant] = useState('');\n\n  return (\n    <div>\n      <ShopList setVariant={setVariant} />\n      <ShopMenu shopId={variant} />\n    </div>\n  );\n};\n\nexport default ShopPage;\n","//selectors\nexport const getCart = state => state.cart.items;\n"],"names":["getShopsList","state","shops","items","getShopsLoading","isLoading","setVariant","dispatch","useDispatch","useSelector","useState","selectedShop","setSelectedShop","useEffect","fetchShops","length","_id","handleVariantChange","event","selectedShopId","target","value","map","shop","type","name","onChange","checked","getShopMenu","menus","shopId","cart","getCart","showToaster","setShowToaster","fetchShopMenu","toast","menu","item","index","photo","src","alt","price","onClick","find","test","owner","addToCart","handleAddToCart","variant"],"sourceRoot":""}